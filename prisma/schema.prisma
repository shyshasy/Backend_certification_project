datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum Role {
  ADMIN
  CLIENT
}
model Utilisateur {
  id        Int      @id @default(autoincrement())
  nom       String   @db.VarChar(50)
  role      Role    @default(ADMIN) 
  email     String   @unique @db.VarChar(250)
  status    Boolean
  password  String   @db.VarChar(255)

  tickets   Ticket[] @relation("UtilisateurTickets")
  evaluations Evaluation[] @relation("UtilisateurEvaluations")
}

model Guichet {
  id              Int      @id @default(autoincrement())
  numero_guichet  Int @unique
  statut          Boolean
  responsable     String   @db.VarChar(50)

  tickets         Ticket[] @relation("GuichetTickets")
}
model Ticket {
  id            Int       @id @default(autoincrement())   // Identifiant unique, auto-incrémenté
  numero        Int       @unique                        // Numéro unique du ticket
  date          DateTime  @default(now())                // Date et heure de création du ticket
  statut        String    @default("en_attente")          // Statut du ticket (par défaut "en_attente")
  clientName    String    @db.VarChar(100) @default("Inconnu")  // Valeur par défaut "Inconnu" pour le nom du client
  guichetId     Int       @default(1)                     // Valeur par défaut (utilisez un ID de guichet existant ou une valeur générique)
  guichet       Guichet   @relation("GuichetTickets", fields: [guichetId], references: [id]) // Relation avec le guichet
  utilisateurId Int       @default(1)                     // Valeur par défaut (utilisez un ID d'utilisateur existant ou une valeur générique)
  utilisateur   Utilisateur @relation("UtilisateurTickets", fields: [utilisateurId], references: [id]) // Relation avec l'utilisateur
}





model Evaluation {
  id             Int        @id @default(autoincrement())
  satis_score    Int
  commentaire    String     @db.Text
  date_evaluation DateTime

  utilisateur_id Int
  utilisateur    Utilisateur @relation("UtilisateurEvaluations", fields: [utilisateur_id], references: [id])
}
